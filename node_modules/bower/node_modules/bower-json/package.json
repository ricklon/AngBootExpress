{
  "name": "bower-json",
  "version": "0.1.0-rc.1",
  "description": "Read bower.json files with semantics, normalisation, defaults and validation.",
  "author": {
    "name": "Twitter"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/bower/json/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/bower/json.git"
  },
  "main": "lib/json",
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "graceful-fs": "~1.2.2"
  },
  "devDependencies": {
    "expect.js": "~0.2.0",
    "mocha": "~1.12.0"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "readme": "# bower-json [![Build Status](https://secure.travis-ci.org/bower/json.png?branch=master)](http://travis-ci.org/bower/json)\n\nRead `bower.json` files with semantics, normalisation, defaults and validation.\n\n\n## Usage\n\n#### .read(file, callback)\n\nReads `file` and applies normalisation, defaults and validation according to the `bower.json` spec.   \nIf the passed `file` does not exists, the callback is called with `error.code` equal to `ENOENT`.   \nIf the passed `file` contents are not a valid JSON, the callback is called with `error.code` equal to `EMALFORMED`.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\n```js\nvar bowerJson = require('bower-json');\n\n// Can also be used by simply calling bowerJson()\nbowerJson.read('/path/to/bower.json', function (err, json) {\n    if (err) {\n        console.error('There was an error reading the file');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('JSON: ', json);\n});\n```\n\n\n#### .parse(json, callback)\n\nParses an object. Useful when you want to apply normalisation, defaults and validation directly to an object.   \nIf the `json` does not comply with the `bower.json` spec, the callback is called with `error.code` equal to `EINVALID`.\n\n```js\nvar bowerJson = require('bower-json');\n\nvar json = {\n    name: 'my-package',\n    version: '0.0.1'\n};\n\nbowerJson.parse(json, function (err, json) {\n    if (err) {\n        console.error('There was an error parsing the object');\n        console.error(err.message);\n        return;\n    }\n\n    console.log('Parsed: ', json);\n});\n```\n\n\n#### .find(folder, callback)\n\nFinds the `json` filename inside a folder.   \nChecks if a `bower.json` exists, falling back to the deprecated `component.json`.   \nIf no file was found, the callback is called with a `error.code` of `ENOENT`.\n\n```js\nvar bowerJson = require('bower-json');\n\nbowerJson.find('/path/to/folder', function (err, filename) {\n    if (err) {\n        console.error('There is no json file in the folder');\n        return;\n    }\n\n    console.log('Filename: ', filename);\n\n    // Now that we got the filename, we can read its contents\n    bowerJson.read(filename, function (err, json) {\n        if (err) {\n            console.error('There was an error reading the file');\n            console.error(err.message);\n            return;\n        }\n\n        console.log('JSON: ', json);\n    });\n});\n```\n\n\n## License\n\nReleased under the [MIT License](http://www.opensource.org/licenses/mit-license.php).\n",
  "_id": "bower-json@0.1.0-rc.1",
  "dist": {
    "shasum": "cbd15e7a32765d7e1e9ab05e8d72353b4b17057d"
  },
  "_from": "bower-json@~0.1.0"
}
